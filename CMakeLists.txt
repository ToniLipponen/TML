cmake_minimum_required(VERSION 3.10)
project(TML)
option(TML_DEBUG_OPENGL_CALLS "Applies error checking around opengl function calls." no)
option(TML_ASSERT "Applies asserts around important functions" yes)
option(TML_MAKE_STATIC "Makes a static lib on unix" no)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(GLFW_LIBRARY_TYPE OBJECT)
set(CMAKE_CXX_STANDARD 17)

if(NOT TML_ASSERT)
    add_compile_definitions(TML_NO_DEBUGGING=1)
endif()
if(NOT TML_DEBUG_OPENGL_CALLS)
    add_compile_definitions(TML_NO_GL_DEBUGGING=1)
endif()

file(GLOB_RECURSE SRC_FILES src/*.cpp src/glad.c external/incbin/incbin.c)
add_subdirectory(external/glfw/)
include_directories(external/glm external/glfw/include include external res)

set(GLFW_LIBARY_TYPE OBJECT)


if(TML_MAKE_STATIC)
    add_library(TML STATIC ${SRC_FILES})
else()
    add_library(TML SHARED ${SRC_FILES})
endif()

if(WIN32 OR MSVC)
    target_compile_features(TML PUBLIC cxx_std_17)
    target_compile_options(TML INTERFACE /arch:SSE3)
    target_link_libraries(TML glfw)
elseif(UNIX)
    set(CMAKE_INSTALL_PREFIX /usr)
    target_compile_features(TML PUBLIC cxx_std_17)
    target_compile_options(TML INTERFACE -msse3)
    target_link_libraries(TML glfw dl pthread)
    install(TARGETS ${PROJECT_NAME} DESTINATION /usr/lib)
    install(DIRECTORY include/TML DESTINATION /usr/include)
endif()
